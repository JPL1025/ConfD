#! /bin/bash

#Colors
Color_Off='\033[0m'
Red='\033[0;31m'
Yellow='\033[1;33m'
Green='\033[0;32m'

echo ""

#checks of arguments
if [ $# == 0 ]; then
	echo "Usage:"
	echo "./single_test <test_path>"
	echo ""
	echo "Example:"
	echo "./single_test ext4/006"
	echo ""
	exit 0
fi
test_num="$1"
echo "testing ${test_num}"

#defines INT handler
trap ctrl_c INT
function ctrl_c () {
	#echo "exiting early"
	cp tests/backup/${test_num}.bak tests/${test_num}
	exit
}

#prepares backup directory 
if [ ! -d "tests/backup" ]; then
	echo "creating backup directory (./tests/backup)"
	echo ""
	mkdir tests/backup
	mkdir tests/backup/ext4
	mkdir tests/backup/generic
	mkdir tests/backup/xfs
fi

#prepares fail test directory
if [ ! -d "fails" ]; then
	echo "creating fail test directory (./fails)"
	echo ""
	mkdir fails
	mkdir fails/ext4
	mkdir fails/generic
	mkdir fails/xfs
else
	#echo "removing contents of ./fails"
	echo ""
	#rm -r -f fails/*
	#mkdir fails/ext4
	#mkdir fails/generic
	#mkdir fails/xfs
fi

#copies ext4 test
cp tests/${test_num} tests/backup/${test_num}.bak

declare -i count=0
declare -i pass_count=0
#reads through config file
while IFS= read -r line
do
	count+=1
	echo "reading configuration file line..."
	oldIFS="$IFS"
	declare -a arrayNew
	declare -a arrayOrig
	declare -a arrayModules
	declare -a arrayNewMod
	if [[ $line == \(mke2fs\)* ]]; then
		#print orig param
		while IFS= read -r line2
		do
			if [[ $line2 == _scratch_mkfs* ]]; then
				read -a arrayOrig <<< $line2
			fi

		done < "tests/${test_num}"
		#echo ""
		
		#handles parameter file
		#IFS='-';
		read -a arrayNew <<< $line
		
		output=${arrayOrig[0]}
		output+=" "
		output+=${arrayNew[@]:1}
		output+=" "
	
		#echo "${arrayOrig[0]}""${arrayNew[*]:1}""${arrayOrig[*]:1}"
		#output=( ${arrayOrig[0]} ${arrayNew[*]:1} ${arrayOrig[*]:1})
		echo "$output"
		echo ""
		#IFS="$oldIFS"

		if [[ ${arrayOrig[@]:1} == *seqres.full* ]]; then
			sed -i "/_scratch_mkfs/c\\$output \>\>\$seqres.full 2>&1" tests/${test_num}
		elif [[ ${arrayOrig[@]:1} == */dev/null* ]]; then
			sed -i "/_scratch_mkfs/c\\$output \> \$dev/null 2>&1" tests/${test_num}
		else
			echo "not valid test"
			exit 0
		fi

		#runs test
		test_results=$(./check tests/${test_num})
		#echo "$test_results"
		
		#checks if test ran/passedpassed
		if [[ "$test_results" == *"Not run:"* ]]; then
			printf "${Yellow}Test Not Run${Color_Off}\n"
			echo "Copying to fails/${test_num}_$count"
			cp tests/${test_num} fails/${test_num}_$count
			echo "$test_results" > fails/${test_num}_$count.log
		elif [[ "$test_results" == *"Passed all"* ]]; then
			printf "${Green}Passed test${Color_Off}\n"
			pass_count+=1
		else
			printf "${Red}Failed test${Color_Off}\n"
			echo "Copying to fails/${test_num}_$count"
			cp tests/${test_num} fails/${test_num}_$count
			cp results/${test_num}.out.bad fails/${test_num}_${count}.out.bad
			echo "$test_results" > fails/${test_num}_$count.log
		fi

		#copy .full file 
		cp results/${test_num}.full fails/${test_num}_${count}.full

		#restores orig test
		cp tests/backup/${test_num}.bak tests/${test_num}

		sleep 1
		echo ""
		echo ""

	fi
	IFS="$oldIFS"
done < "config_state.txt" 
count+=-1
printf "${pass_count}/${count} tests passed\n"

#replaces command in test file 
#sed -i "/\$MKFS/c\\$output" tests/ext4/005


#restores orignial test from backup
#cp tests/backup/005.bak tests/ext4/005
exit 0

